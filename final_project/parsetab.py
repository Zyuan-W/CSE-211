
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIV ELSE EQUALS FOR GREATER IF IGNORE_CONTENT INT LB LESS LPAREN MINUS MULT NUM PLUS PRINT RB RPAREN SEMICOLON VAR WHILEprogram : statement\n               | program statement\n    statement : INT VAR SEMICOLON\n              | INT VAR EQUALS NUM SEMICOLON\n    \n    statement : VAR EQUALS NUM SEMICOLON\n    \n    statement : IF LPAREN condition RPAREN\n    \n    statement : FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN\n    \n    statement : WHILE LPAREN condition RPAREN\n    \n    condition : VAR GREATER NUM\n                | VAR LESS NUM\n                | VAR GREATER VAR\n                | VAR LESS VAR\n                | VAR EQUALS EQUALS NUM\n    \n    for_update : VAR PLUS PLUS\n               \n    \n    statement : LB statement RB\n                \n                \n    '
    
_lr_action_items = {'INT':([0,1,2,8,9,13,16,23,25,26,31,32,47,],[3,3,-1,3,-2,21,-3,-15,-5,-6,-8,-4,-7,]),'VAR':([0,1,2,3,8,9,12,14,16,21,23,25,26,27,28,31,32,41,43,47,],[4,4,-1,10,4,-2,20,20,-3,30,-15,-5,-6,33,35,-8,-4,20,44,-7,]),'IF':([0,1,2,8,9,16,23,25,26,31,32,47,],[5,5,-1,5,-2,-3,-15,-5,-6,-8,-4,-7,]),'FOR':([0,1,2,8,9,16,23,25,26,31,32,47,],[6,6,-1,6,-2,-3,-15,-5,-6,-8,-4,-7,]),'WHILE':([0,1,2,8,9,16,23,25,26,31,32,47,],[7,7,-1,7,-2,-3,-15,-5,-6,-8,-4,-7,]),'LB':([0,1,2,8,9,16,23,25,26,31,32,47,],[8,8,-1,8,-2,-3,-15,-5,-6,-8,-4,-7,]),'$end':([1,2,9,16,23,25,26,31,32,47,],[0,-1,-2,-3,-15,-5,-6,-8,-4,-7,]),'EQUALS':([4,10,20,29,30,],[11,17,29,37,38,]),'LPAREN':([5,6,7,],[12,13,14,]),'SEMICOLON':([10,18,24,33,34,35,36,39,40,42,],[16,25,32,-11,-9,-12,-10,-13,41,43,]),'NUM':([11,17,27,28,37,38,],[18,24,34,36,39,40,]),'RB':([15,16,23,25,26,31,32,47,],[23,-3,-15,-5,-6,-8,-4,-7,]),'RPAREN':([19,22,33,34,35,36,39,45,48,],[26,31,-11,-9,-12,-10,-13,47,-14,]),'GREATER':([20,],[27,]),'LESS':([20,],[28,]),'PLUS':([44,46,],[46,48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,8,],[2,9,15,]),'condition':([12,14,41,],[19,22,42,]),'for_update':([43,],[45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','skeleton.py',112),
  ('program -> program statement','program',2,'p_program','skeleton.py',113),
  ('statement -> INT VAR SEMICOLON','statement',3,'p_statement_decl','skeleton.py',124),
  ('statement -> INT VAR EQUALS NUM SEMICOLON','statement',5,'p_statement_decl','skeleton.py',125),
  ('statement -> VAR EQUALS NUM SEMICOLON','statement',4,'p_statement_assign','skeleton.py',135),
  ('statement -> IF LPAREN condition RPAREN','statement',4,'p_statement_if','skeleton.py',142),
  ('statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN','statement',11,'p_statement_for','skeleton.py',149),
  ('statement -> WHILE LPAREN condition RPAREN','statement',4,'p_statement_while','skeleton.py',157),
  ('condition -> VAR GREATER NUM','condition',3,'p_condition','skeleton.py',165),
  ('condition -> VAR LESS NUM','condition',3,'p_condition','skeleton.py',166),
  ('condition -> VAR GREATER VAR','condition',3,'p_condition','skeleton.py',167),
  ('condition -> VAR LESS VAR','condition',3,'p_condition','skeleton.py',168),
  ('condition -> VAR EQUALS EQUALS NUM','condition',4,'p_condition','skeleton.py',169),
  ('for_update -> VAR PLUS PLUS','for_update',3,'p_for_update','skeleton.py',180),
  ('statement -> LB statement RB','statement',3,'p_statement_scope','skeleton.py',188),
]
