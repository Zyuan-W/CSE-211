
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEDIVIDE ELSE EQUALS FOR IF LBRACE LPAREN MINUS NAME NUMBER PLUS RBRACE RPAREN SEMICOLON TIMES WHILEstatement : NAME EQUALS expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : NAMEstatement : IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE\n                 | IF LPAREN expression RPAREN LBRACE statements RBRACEstatement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEstatement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LBRACE statements RBRACEstatements : statement\n                  | statements statement'
    
_lr_action_items = {'NAME':([0,6,7,8,9,16,17,18,19,20,23,28,29,31,32,33,34,35,36,37,41,42,43,44,45,46,],[2,10,10,10,10,-1,10,10,10,10,10,2,2,2,-12,2,10,-9,-13,-10,2,2,2,2,-8,-11,]),'IF':([0,16,28,29,31,32,33,35,36,37,41,42,43,44,45,46,],[3,-1,3,3,3,-12,3,-9,-13,-10,3,3,3,3,-8,-11,]),'WHILE':([0,16,28,29,31,32,33,35,36,37,41,42,43,44,45,46,],[4,-1,4,4,4,-12,4,-9,-13,-10,4,4,4,4,-8,-11,]),'FOR':([0,16,28,29,31,32,33,35,36,37,41,42,43,44,45,46,],[5,-1,5,5,5,-12,5,-9,-13,-10,5,5,5,5,-8,-11,]),'$end':([1,16,35,37,45,46,],[0,-1,-9,-10,-8,-11,]),'EQUALS':([2,],[6,]),'LPAREN':([3,4,5,],[7,8,9,]),'NUMBER':([6,7,8,9,17,18,19,20,23,34,],[12,12,12,12,12,12,12,12,12,12,]),'SEMICOLON':([10,11,12,15,24,25,26,27,30,],[-7,16,-6,23,-2,-3,-4,-5,34,]),'PLUS':([10,11,12,13,14,15,24,25,26,27,30,38,],[-7,17,-6,17,17,17,-2,-3,-4,-5,17,17,]),'MINUS':([10,11,12,13,14,15,24,25,26,27,30,38,],[-7,18,-6,18,18,18,-2,-3,-4,-5,18,18,]),'TIMES':([10,11,12,13,14,15,24,25,26,27,30,38,],[-7,19,-6,19,19,19,19,19,-4,-5,19,19,]),'DIVIDE':([10,11,12,13,14,15,24,25,26,27,30,38,],[-7,20,-6,20,20,20,20,20,-4,-5,20,20,]),'RPAREN':([10,12,13,14,24,25,26,27,38,],[-7,-6,21,22,-2,-3,-4,-5,40,]),'RBRACE':([16,31,32,33,35,36,37,43,44,45,46,],[-1,35,-12,37,-9,-13,-10,45,46,-8,-11,]),'LBRACE':([21,22,39,40,],[28,29,41,42,]),'ELSE':([35,],[39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,28,29,31,33,41,42,43,44,],[1,32,32,36,36,32,32,36,36,]),'expression':([6,7,8,9,17,18,19,20,23,34,],[11,13,14,15,24,25,26,27,30,38,]),'statements':([28,29,41,42,],[31,33,43,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression SEMICOLON','statement',4,'p_statement_assign','demo.py',65),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','demo.py',69),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','demo.py',70),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','demo.py',71),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','demo.py',72),
  ('expression -> NUMBER','expression',1,'p_expression_number','demo.py',76),
  ('expression -> NAME','expression',1,'p_expression_name','demo.py',80),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','statement',11,'p_statement_if_else','demo.py',87),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','statement',7,'p_statement_if_else','demo.py',88),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','statement',7,'p_statement_while','demo.py',96),
  ('statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LBRACE statements RBRACE','statement',11,'p_statement_for','demo.py',101),
  ('statements -> statement','statements',1,'p_statements','demo.py',106),
  ('statements -> statements statement','statements',2,'p_statements','demo.py',107),
]
