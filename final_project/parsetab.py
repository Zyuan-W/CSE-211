
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA COUT DIV ELSE ENDL EQUALS FOR GREATER IF IGNORE_CONTENT INT LB LESS LPAREN MINUS MULT NUM PLUS PRINT RB RETURN RPAREN SEMICOLON SENTENCE VAR WHILEprogram : statement\n               | program statement\n    statement : INT VAR LPAREN params RPAREN SEMICOLON\n    \n    statement : INT VAR LPAREN params RPAREN\n    \n    params : INT VAR\n           | INT VAR COMMA params\n           |\n    \n    args : VAR\n         | args COMMA VAR\n         | NUM\n         | args COMMA NUM\n         |\n    \n    statement : f_statement\n    \n    f_statement : VAR LPAREN args RPAREN SEMICOLON\n                | VAR EQUALS f_statement\n    \n    statement : INT VAR SEMICOLON\n              | INT VAR EQUALS NUM SEMICOLON\n              | INT VAR EQUALS VAR SEMICOLON\n              | INT VAR EQUALS expr SEMICOLON\n    \n    statement : VAR EQUALS NUM SEMICOLON\n                | VAR EQUALS expr SEMICOLON\n    \n    statement : VAR PLUS PLUS SEMICOLON\n    \n    statement : IF LPAREN condition RPAREN\n    \n    statement : ELSE\n    \n    statement : FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN\n    \n    statement : WHILE LPAREN condition RPAREN\n    \n    condition : VAR GREATER NUM\n                | VAR LESS NUM\n                | VAR GREATER VAR\n                | VAR LESS VAR\n                | VAR EQUALS EQUALS NUM\n    \n    statement : RETURN expr SEMICOLON\n    \n    for_update : VAR PLUS PLUS\n               \n    \n    statement : LB               \n    \n    statement : RB             \n    \n    expr : expr PLUS term\n    expr : expr MINUS termexpr : termterm : term MULT factorterm : term DIV factorterm : factorfactor : LPAREN expr RPARENfactor : NUMfactor : VAR\n    p_content : LESS LESS VAR p_content\n            | LESS LESS SENTENCE p_content\n            | LESS LESS ENDL\n            |\n    \n    statement : COUT p_content SEMICOLON\n\n    '
    
_lr_action_items = {'INT':([0,1,2,5,7,11,12,14,20,30,31,36,45,51,59,60,61,64,69,79,80,81,82,84,95,96,106,],[3,3,-1,-13,-24,-34,-35,-2,43,53,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,53,-3,-25,]),'VAR':([0,1,2,3,5,7,10,11,12,14,16,18,19,21,25,31,32,36,43,45,46,47,48,49,51,52,53,58,59,60,61,63,64,65,66,69,79,80,81,82,84,96,100,102,106,],[4,4,-1,15,-13,-24,27,-34,-35,-2,33,38,42,42,27,-16,55,-15,68,-32,27,27,27,27,-49,75,78,83,-20,-21,-22,85,-23,87,89,-26,-4,-18,-17,-19,-14,-3,42,103,-25,]),'IF':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[6,6,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'ELSE':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[7,7,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'FOR':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[8,8,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'WHILE':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[9,9,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'RETURN':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[10,10,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'LB':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[11,11,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'RB':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[12,12,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'COUT':([0,1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[13,13,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'$end':([1,2,5,7,11,12,14,31,36,45,51,59,60,61,64,69,79,80,81,82,84,96,106,],[0,-1,-13,-24,-34,-35,-2,-16,-15,-32,-49,-20,-21,-22,-23,-26,-4,-18,-17,-19,-14,-3,-25,]),'EQUALS':([4,15,33,42,67,68,83,],[16,32,58,67,91,92,58,]),'PLUS':([4,17,22,23,24,26,27,33,34,35,50,55,56,57,70,71,72,73,74,103,105,],[17,37,46,-38,-41,-43,-44,-44,-43,46,46,-44,-43,46,-36,-37,-39,-40,-42,105,107,]),'LPAREN':([4,6,8,9,10,15,16,25,32,33,46,47,48,49,83,],[18,19,20,21,25,30,25,25,25,18,25,25,25,25,18,]),'NUM':([10,16,18,25,32,46,47,48,49,63,65,66,91,92,],[26,34,40,26,56,26,26,26,26,86,88,90,97,98,]),'LESS':([13,29,42,75,76,],[29,52,66,29,29,]),'SEMICOLON':([13,15,22,23,24,26,27,28,33,34,35,37,55,56,57,62,70,71,72,73,74,75,76,77,79,87,88,89,90,93,94,97,98,101,],[-48,31,45,-38,-41,-43,-44,51,-44,59,60,61,80,81,82,84,-36,-37,-39,-40,-42,-48,-48,-47,96,-29,-27,-30,-28,-45,-46,-31,100,102,]),'RPAREN':([18,23,24,26,27,30,38,39,40,41,44,50,54,70,71,72,73,74,78,85,86,87,88,89,90,95,97,99,104,107,],[-12,-38,-41,-43,-44,-7,-8,62,-10,64,69,74,79,-36,-37,-39,-40,-42,-5,-9,-11,-29,-27,-30,-28,-7,-31,-6,106,-33,]),'COMMA':([18,38,39,40,78,85,86,],[-12,-8,63,-10,95,-9,-11,]),'MINUS':([22,23,24,26,27,33,34,35,50,55,56,57,70,71,72,73,74,],[47,-38,-41,-43,-44,-44,-43,47,47,-44,-43,47,-36,-37,-39,-40,-42,]),'MULT':([23,24,26,27,33,34,55,56,70,71,72,73,74,],[48,-41,-43,-44,-44,-43,-44,-43,48,48,-39,-40,-42,]),'DIV':([23,24,26,27,33,34,55,56,70,71,72,73,74,],[49,-41,-43,-44,-44,-43,-44,-43,49,49,-39,-40,-42,]),'GREATER':([42,],[65,]),'SENTENCE':([52,],[76,]),'ENDL':([52,],[77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,14,]),'f_statement':([0,1,16,58,],[5,5,36,36,]),'expr':([10,16,25,32,],[22,35,50,57,]),'term':([10,16,25,32,46,47,],[23,23,23,23,70,71,]),'factor':([10,16,25,32,46,47,48,49,],[24,24,24,24,24,24,72,73,]),'p_content':([13,75,76,],[28,93,94,]),'args':([18,],[39,]),'condition':([19,21,100,],[41,44,101,]),'params':([30,95,],[54,99,]),'for_update':([102,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','skeleton.py',133),
  ('program -> program statement','program',2,'p_program','skeleton.py',134),
  ('statement -> INT VAR LPAREN params RPAREN SEMICOLON','statement',6,'p_func_decl','skeleton.py',143),
  ('statement -> INT VAR LPAREN params RPAREN','statement',5,'p_function','skeleton.py',148),
  ('params -> INT VAR','params',2,'p_func_params','skeleton.py',154),
  ('params -> INT VAR COMMA params','params',4,'p_func_params','skeleton.py',155),
  ('params -> <empty>','params',0,'p_func_params','skeleton.py',156),
  ('args -> VAR','args',1,'p_func_args','skeleton.py',167),
  ('args -> args COMMA VAR','args',3,'p_func_args','skeleton.py',168),
  ('args -> NUM','args',1,'p_func_args','skeleton.py',169),
  ('args -> args COMMA NUM','args',3,'p_func_args','skeleton.py',170),
  ('args -> <empty>','args',0,'p_func_args','skeleton.py',171),
  ('statement -> f_statement','statement',1,'p_f_statement','skeleton.py',182),
  ('f_statement -> VAR LPAREN args RPAREN SEMICOLON','f_statement',5,'p_func_call','skeleton.py',189),
  ('f_statement -> VAR EQUALS f_statement','f_statement',3,'p_func_call','skeleton.py',190),
  ('statement -> INT VAR SEMICOLON','statement',3,'p_statement_decl','skeleton.py',201),
  ('statement -> INT VAR EQUALS NUM SEMICOLON','statement',5,'p_statement_decl','skeleton.py',202),
  ('statement -> INT VAR EQUALS VAR SEMICOLON','statement',5,'p_statement_decl','skeleton.py',203),
  ('statement -> INT VAR EQUALS expr SEMICOLON','statement',5,'p_statement_decl','skeleton.py',204),
  ('statement -> VAR EQUALS NUM SEMICOLON','statement',4,'p_statement_assign','skeleton.py',214),
  ('statement -> VAR EQUALS expr SEMICOLON','statement',4,'p_statement_assign','skeleton.py',215),
  ('statement -> VAR PLUS PLUS SEMICOLON','statement',4,'p_statement_plusplus','skeleton.py',221),
  ('statement -> IF LPAREN condition RPAREN','statement',4,'p_statement_if','skeleton.py',228),
  ('statement -> ELSE','statement',1,'p_statement_if_else','skeleton.py',234),
  ('statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN','statement',11,'p_statement_for','skeleton.py',241),
  ('statement -> WHILE LPAREN condition RPAREN','statement',4,'p_statement_while','skeleton.py',249),
  ('condition -> VAR GREATER NUM','condition',3,'p_condition','skeleton.py',257),
  ('condition -> VAR LESS NUM','condition',3,'p_condition','skeleton.py',258),
  ('condition -> VAR GREATER VAR','condition',3,'p_condition','skeleton.py',259),
  ('condition -> VAR LESS VAR','condition',3,'p_condition','skeleton.py',260),
  ('condition -> VAR EQUALS EQUALS NUM','condition',4,'p_condition','skeleton.py',261),
  ('statement -> RETURN expr SEMICOLON','statement',3,'p_statement_return','skeleton.py',272),
  ('for_update -> VAR PLUS PLUS','for_update',3,'p_for_update','skeleton.py',280),
  ('statement -> LB','statement',1,'p_statement_lb','skeleton.py',287),
  ('statement -> RB','statement',1,'p_statement_rb','skeleton.py',293),
  ('expr -> expr PLUS term','expr',3,'p_expr_plus','skeleton.py',299),
  ('expr -> expr MINUS term','expr',3,'p_expr_minus','skeleton.py',315),
  ('expr -> term','expr',1,'p_expr_term','skeleton.py',323),
  ('term -> term MULT factor','term',3,'p_term_mult','skeleton.py',327),
  ('term -> term DIV factor','term',3,'p_term_div','skeleton.py',331),
  ('term -> factor','term',1,'p_term_factor','skeleton.py',339),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor_expr','skeleton.py',343),
  ('factor -> NUM','factor',1,'p_factor_num','skeleton.py',347),
  ('factor -> VAR','factor',1,'p_factor_var','skeleton.py',351),
  ('p_content -> LESS LESS VAR p_content','p_content',4,'p_print_content','skeleton.py',356),
  ('p_content -> LESS LESS SENTENCE p_content','p_content',4,'p_print_content','skeleton.py',357),
  ('p_content -> LESS LESS ENDL','p_content',3,'p_print_content','skeleton.py',358),
  ('p_content -> <empty>','p_content',0,'p_print_content','skeleton.py',359),
  ('statement -> COUT p_content SEMICOLON','statement',3,'p_statement_print','skeleton.py',370),
]
