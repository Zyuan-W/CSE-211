Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    IGNORE_CONTENT
    PRINT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     statement -> INT VAR LPAREN params RPAREN SEMICOLON
Rule 4     statement -> INT VAR LPAREN params RPAREN
Rule 5     params -> INT VAR
Rule 6     params -> params COMMA INT VAR
Rule 7     params -> <empty>
Rule 8     args -> VAR
Rule 9     args -> args COMMA VAR
Rule 10    args -> NUM
Rule 11    args -> args COMMA NUM
Rule 12    args -> <empty>
Rule 13    statement -> f_statement
Rule 14    f_statement -> VAR LPAREN args RPAREN SEMICOLON
Rule 15    f_statement -> VAR EQUALS f_statement
Rule 16    statement -> INT VAR SEMICOLON
Rule 17    statement -> INT VAR EQUALS NUM SEMICOLON
Rule 18    statement -> INT VAR EQUALS VAR SEMICOLON
Rule 19    statement -> INT VAR EQUALS expr SEMICOLON
Rule 20    statement -> VAR EQUALS NUM SEMICOLON
Rule 21    statement -> array EQUALS NUM SEMICOLON
Rule 22    statement -> VAR EQUALS expr SEMICOLON
Rule 23    statement -> array EQUALS expr SEMICOLON
Rule 24    statement -> VAR PLUS PLUS SEMICOLON
Rule 25    statement -> IF LPAREN condition RPAREN
Rule 26    statement -> ELSE
Rule 27    statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN
Rule 28    statement -> WHILE LPAREN condition RPAREN
Rule 29    condition -> VAR GREATER NUM
Rule 30    condition -> VAR LESS NUM
Rule 31    condition -> VAR GREATER VAR
Rule 32    condition -> VAR LESS VAR
Rule 33    condition -> VAR EQUALS EQUALS NUM
Rule 34    statement -> RETURN expr SEMICOLON
Rule 35    for_update -> VAR PLUS PLUS
Rule 36    for_update -> VAR MINUS MINUS
Rule 37    statement -> LB
Rule 38    statement -> RB
Rule 39    expr -> expr PLUS term
Rule 40    expr -> expr MINUS term
Rule 41    expr -> term
Rule 42    term -> term STAR factor
Rule 43    term -> term DIV factor
Rule 44    term -> factor
Rule 45    factor -> LPAREN expr RPAREN
Rule 46    factor -> NUM
Rule 47    factor -> VAR
Rule 48    factor -> array
Rule 49    array -> VAR LBRACKET NUM RBRACKET
Rule 50    statement -> INT STAR VAR SEMICOLON
Rule 51    p_content -> LESS LESS VAR p_content
Rule 52    p_content -> LESS LESS SENTENCE p_content
Rule 53    p_content -> LESS LESS ENDL
Rule 54    p_content -> <empty>
Rule 55    statement -> COUT p_content SEMICOLON

Terminals, with rules where they appear

COMMA                : 6 9 11
COUT                 : 55
DIV                  : 43
ELSE                 : 26
ENDL                 : 53
EQUALS               : 15 17 18 19 20 21 22 23 27 33 33
FOR                  : 27
GREATER              : 29 31
IF                   : 25
IGNORE_CONTENT       : 
INT                  : 3 4 5 6 16 17 18 19 27 50
LB                   : 37
LBRACKET             : 49
LESS                 : 30 32 51 51 52 52 53 53
LPAREN               : 3 4 14 25 27 28 45
MINUS                : 36 36 40
NUM                  : 10 11 17 20 21 27 29 30 33 46 49
PLUS                 : 24 24 35 35 39
PRINT                : 
RB                   : 38
RBRACKET             : 49
RETURN               : 34
RPAREN               : 3 4 14 25 27 28 45
SEMICOLON            : 3 14 16 17 18 19 20 21 22 23 24 27 27 34 50 55
SENTENCE             : 52
STAR                 : 42 50
VAR                  : 3 4 5 6 8 9 14 15 16 17 18 18 19 20 22 24 27 29 30 31 31 32 32 33 35 36 47 49 50 51
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

args                 : 9 11 14
array                : 21 23 48
condition            : 25 27 28
expr                 : 19 22 23 34 39 40 45
f_statement          : 13 15
factor               : 42 43 44
for_update           : 27
p_content            : 51 52 55
params               : 3 4 6
program              : 2 0
statement            : 1 2
term                 : 39 40 41 42 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . INT VAR LPAREN params RPAREN SEMICOLON
    (4) statement -> . INT VAR LPAREN params RPAREN
    (13) statement -> . f_statement
    (16) statement -> . INT VAR SEMICOLON
    (17) statement -> . INT VAR EQUALS NUM SEMICOLON
    (18) statement -> . INT VAR EQUALS VAR SEMICOLON
    (19) statement -> . INT VAR EQUALS expr SEMICOLON
    (20) statement -> . VAR EQUALS NUM SEMICOLON
    (21) statement -> . array EQUALS NUM SEMICOLON
    (22) statement -> . VAR EQUALS expr SEMICOLON
    (23) statement -> . array EQUALS expr SEMICOLON
    (24) statement -> . VAR PLUS PLUS SEMICOLON
    (25) statement -> . IF LPAREN condition RPAREN
    (26) statement -> . ELSE
    (27) statement -> . FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN
    (28) statement -> . WHILE LPAREN condition RPAREN
    (34) statement -> . RETURN expr SEMICOLON
    (37) statement -> . LB
    (38) statement -> . RB
    (50) statement -> . INT STAR VAR SEMICOLON
    (55) statement -> . COUT p_content SEMICOLON
    (14) f_statement -> . VAR LPAREN args RPAREN SEMICOLON
    (15) f_statement -> . VAR EQUALS f_statement
    (49) array -> . VAR LBRACKET NUM RBRACKET

    INT             shift and go to state 3
    VAR             shift and go to state 4
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    LB              shift and go to state 12
    RB              shift and go to state 13
    COUT            shift and go to state 14

    program                        shift and go to state 1
    statement                      shift and go to state 2
    f_statement                    shift and go to state 5
    array                          shift and go to state 6

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (3) statement -> . INT VAR LPAREN params RPAREN SEMICOLON
    (4) statement -> . INT VAR LPAREN params RPAREN
    (13) statement -> . f_statement
    (16) statement -> . INT VAR SEMICOLON
    (17) statement -> . INT VAR EQUALS NUM SEMICOLON
    (18) statement -> . INT VAR EQUALS VAR SEMICOLON
    (19) statement -> . INT VAR EQUALS expr SEMICOLON
    (20) statement -> . VAR EQUALS NUM SEMICOLON
    (21) statement -> . array EQUALS NUM SEMICOLON
    (22) statement -> . VAR EQUALS expr SEMICOLON
    (23) statement -> . array EQUALS expr SEMICOLON
    (24) statement -> . VAR PLUS PLUS SEMICOLON
    (25) statement -> . IF LPAREN condition RPAREN
    (26) statement -> . ELSE
    (27) statement -> . FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN
    (28) statement -> . WHILE LPAREN condition RPAREN
    (34) statement -> . RETURN expr SEMICOLON
    (37) statement -> . LB
    (38) statement -> . RB
    (50) statement -> . INT STAR VAR SEMICOLON
    (55) statement -> . COUT p_content SEMICOLON
    (14) f_statement -> . VAR LPAREN args RPAREN SEMICOLON
    (15) f_statement -> . VAR EQUALS f_statement
    (49) array -> . VAR LBRACKET NUM RBRACKET

    INT             shift and go to state 3
    VAR             shift and go to state 4
    IF              shift and go to state 7
    ELSE            shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    LB              shift and go to state 12
    RB              shift and go to state 13
    COUT            shift and go to state 14

    statement                      shift and go to state 15
    f_statement                    shift and go to state 5
    array                          shift and go to state 6

state 2

    (1) program -> statement .

    INT             reduce using rule 1 (program -> statement .)
    VAR             reduce using rule 1 (program -> statement .)
    IF              reduce using rule 1 (program -> statement .)
    ELSE            reduce using rule 1 (program -> statement .)
    FOR             reduce using rule 1 (program -> statement .)
    WHILE           reduce using rule 1 (program -> statement .)
    RETURN          reduce using rule 1 (program -> statement .)
    LB              reduce using rule 1 (program -> statement .)
    RB              reduce using rule 1 (program -> statement .)
    COUT            reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)


state 3

    (3) statement -> INT . VAR LPAREN params RPAREN SEMICOLON
    (4) statement -> INT . VAR LPAREN params RPAREN
    (16) statement -> INT . VAR SEMICOLON
    (17) statement -> INT . VAR EQUALS NUM SEMICOLON
    (18) statement -> INT . VAR EQUALS VAR SEMICOLON
    (19) statement -> INT . VAR EQUALS expr SEMICOLON
    (50) statement -> INT . STAR VAR SEMICOLON

    VAR             shift and go to state 16
    STAR            shift and go to state 17


state 4

    (20) statement -> VAR . EQUALS NUM SEMICOLON
    (22) statement -> VAR . EQUALS expr SEMICOLON
    (24) statement -> VAR . PLUS PLUS SEMICOLON
    (14) f_statement -> VAR . LPAREN args RPAREN SEMICOLON
    (15) f_statement -> VAR . EQUALS f_statement
    (49) array -> VAR . LBRACKET NUM RBRACKET

    EQUALS          shift and go to state 18
    PLUS            shift and go to state 19
    LPAREN          shift and go to state 20
    LBRACKET        shift and go to state 21


state 5

    (13) statement -> f_statement .

    INT             reduce using rule 13 (statement -> f_statement .)
    VAR             reduce using rule 13 (statement -> f_statement .)
    IF              reduce using rule 13 (statement -> f_statement .)
    ELSE            reduce using rule 13 (statement -> f_statement .)
    FOR             reduce using rule 13 (statement -> f_statement .)
    WHILE           reduce using rule 13 (statement -> f_statement .)
    RETURN          reduce using rule 13 (statement -> f_statement .)
    LB              reduce using rule 13 (statement -> f_statement .)
    RB              reduce using rule 13 (statement -> f_statement .)
    COUT            reduce using rule 13 (statement -> f_statement .)
    $end            reduce using rule 13 (statement -> f_statement .)


state 6

    (21) statement -> array . EQUALS NUM SEMICOLON
    (23) statement -> array . EQUALS expr SEMICOLON

    EQUALS          shift and go to state 22


state 7

    (25) statement -> IF . LPAREN condition RPAREN

    LPAREN          shift and go to state 23


state 8

    (26) statement -> ELSE .

    INT             reduce using rule 26 (statement -> ELSE .)
    VAR             reduce using rule 26 (statement -> ELSE .)
    IF              reduce using rule 26 (statement -> ELSE .)
    ELSE            reduce using rule 26 (statement -> ELSE .)
    FOR             reduce using rule 26 (statement -> ELSE .)
    WHILE           reduce using rule 26 (statement -> ELSE .)
    RETURN          reduce using rule 26 (statement -> ELSE .)
    LB              reduce using rule 26 (statement -> ELSE .)
    RB              reduce using rule 26 (statement -> ELSE .)
    COUT            reduce using rule 26 (statement -> ELSE .)
    $end            reduce using rule 26 (statement -> ELSE .)


state 9

    (27) statement -> FOR . LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN

    LPAREN          shift and go to state 24


state 10

    (28) statement -> WHILE . LPAREN condition RPAREN

    LPAREN          shift and go to state 25


state 11

    (34) statement -> RETURN . expr SEMICOLON
    (39) expr -> . expr PLUS term
    (40) expr -> . expr MINUS term
    (41) expr -> . term
    (42) term -> . term STAR factor
    (43) term -> . term DIV factor
    (44) term -> . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    LPAREN          shift and go to state 29
    NUM             shift and go to state 30
    VAR             shift and go to state 31

    expr                           shift and go to state 26
    term                           shift and go to state 27
    factor                         shift and go to state 28
    array                          shift and go to state 32

state 12

    (37) statement -> LB .

    INT             reduce using rule 37 (statement -> LB .)
    VAR             reduce using rule 37 (statement -> LB .)
    IF              reduce using rule 37 (statement -> LB .)
    ELSE            reduce using rule 37 (statement -> LB .)
    FOR             reduce using rule 37 (statement -> LB .)
    WHILE           reduce using rule 37 (statement -> LB .)
    RETURN          reduce using rule 37 (statement -> LB .)
    LB              reduce using rule 37 (statement -> LB .)
    RB              reduce using rule 37 (statement -> LB .)
    COUT            reduce using rule 37 (statement -> LB .)
    $end            reduce using rule 37 (statement -> LB .)


state 13

    (38) statement -> RB .

    INT             reduce using rule 38 (statement -> RB .)
    VAR             reduce using rule 38 (statement -> RB .)
    IF              reduce using rule 38 (statement -> RB .)
    ELSE            reduce using rule 38 (statement -> RB .)
    FOR             reduce using rule 38 (statement -> RB .)
    WHILE           reduce using rule 38 (statement -> RB .)
    RETURN          reduce using rule 38 (statement -> RB .)
    LB              reduce using rule 38 (statement -> RB .)
    RB              reduce using rule 38 (statement -> RB .)
    COUT            reduce using rule 38 (statement -> RB .)
    $end            reduce using rule 38 (statement -> RB .)


state 14

    (55) statement -> COUT . p_content SEMICOLON
    (51) p_content -> . LESS LESS VAR p_content
    (52) p_content -> . LESS LESS SENTENCE p_content
    (53) p_content -> . LESS LESS ENDL
    (54) p_content -> .

    LESS            shift and go to state 34
    SEMICOLON       reduce using rule 54 (p_content -> .)

    p_content                      shift and go to state 33

state 15

    (2) program -> program statement .

    INT             reduce using rule 2 (program -> program statement .)
    VAR             reduce using rule 2 (program -> program statement .)
    IF              reduce using rule 2 (program -> program statement .)
    ELSE            reduce using rule 2 (program -> program statement .)
    FOR             reduce using rule 2 (program -> program statement .)
    WHILE           reduce using rule 2 (program -> program statement .)
    RETURN          reduce using rule 2 (program -> program statement .)
    LB              reduce using rule 2 (program -> program statement .)
    RB              reduce using rule 2 (program -> program statement .)
    COUT            reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)


state 16

    (3) statement -> INT VAR . LPAREN params RPAREN SEMICOLON
    (4) statement -> INT VAR . LPAREN params RPAREN
    (16) statement -> INT VAR . SEMICOLON
    (17) statement -> INT VAR . EQUALS NUM SEMICOLON
    (18) statement -> INT VAR . EQUALS VAR SEMICOLON
    (19) statement -> INT VAR . EQUALS expr SEMICOLON

    LPAREN          shift and go to state 35
    SEMICOLON       shift and go to state 36
    EQUALS          shift and go to state 37


state 17

    (50) statement -> INT STAR . VAR SEMICOLON

    VAR             shift and go to state 38


state 18

    (20) statement -> VAR EQUALS . NUM SEMICOLON
    (22) statement -> VAR EQUALS . expr SEMICOLON
    (15) f_statement -> VAR EQUALS . f_statement
    (39) expr -> . expr PLUS term
    (40) expr -> . expr MINUS term
    (41) expr -> . term
    (14) f_statement -> . VAR LPAREN args RPAREN SEMICOLON
    (15) f_statement -> . VAR EQUALS f_statement
    (42) term -> . term STAR factor
    (43) term -> . term DIV factor
    (44) term -> . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    NUM             shift and go to state 40
    VAR             shift and go to state 39
    LPAREN          shift and go to state 29

    expr                           shift and go to state 41
    f_statement                    shift and go to state 42
    term                           shift and go to state 27
    factor                         shift and go to state 28
    array                          shift and go to state 32

state 19

    (24) statement -> VAR PLUS . PLUS SEMICOLON

    PLUS            shift and go to state 43


state 20

    (14) f_statement -> VAR LPAREN . args RPAREN SEMICOLON
    (8) args -> . VAR
    (9) args -> . args COMMA VAR
    (10) args -> . NUM
    (11) args -> . args COMMA NUM
    (12) args -> .

    VAR             shift and go to state 44
    NUM             shift and go to state 46
    RPAREN          reduce using rule 12 (args -> .)
    COMMA           reduce using rule 12 (args -> .)

    args                           shift and go to state 45

state 21

    (49) array -> VAR LBRACKET . NUM RBRACKET

    NUM             shift and go to state 47


state 22

    (21) statement -> array EQUALS . NUM SEMICOLON
    (23) statement -> array EQUALS . expr SEMICOLON
    (39) expr -> . expr PLUS term
    (40) expr -> . expr MINUS term
    (41) expr -> . term
    (42) term -> . term STAR factor
    (43) term -> . term DIV factor
    (44) term -> . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    NUM             shift and go to state 48
    LPAREN          shift and go to state 29
    VAR             shift and go to state 31

    array                          shift and go to state 32
    expr                           shift and go to state 49
    term                           shift and go to state 27
    factor                         shift and go to state 28

state 23

    (25) statement -> IF LPAREN . condition RPAREN
    (29) condition -> . VAR GREATER NUM
    (30) condition -> . VAR LESS NUM
    (31) condition -> . VAR GREATER VAR
    (32) condition -> . VAR LESS VAR
    (33) condition -> . VAR EQUALS EQUALS NUM

    VAR             shift and go to state 51

    condition                      shift and go to state 50

state 24

    (27) statement -> FOR LPAREN . INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN

    INT             shift and go to state 52


state 25

    (28) statement -> WHILE LPAREN . condition RPAREN
    (29) condition -> . VAR GREATER NUM
    (30) condition -> . VAR LESS NUM
    (31) condition -> . VAR GREATER VAR
    (32) condition -> . VAR LESS VAR
    (33) condition -> . VAR EQUALS EQUALS NUM

    VAR             shift and go to state 51

    condition                      shift and go to state 53

state 26

    (34) statement -> RETURN expr . SEMICOLON
    (39) expr -> expr . PLUS term
    (40) expr -> expr . MINUS term

    SEMICOLON       shift and go to state 54
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 27

    (41) expr -> term .
    (42) term -> term . STAR factor
    (43) term -> term . DIV factor

    SEMICOLON       reduce using rule 41 (expr -> term .)
    PLUS            reduce using rule 41 (expr -> term .)
    MINUS           reduce using rule 41 (expr -> term .)
    RPAREN          reduce using rule 41 (expr -> term .)
    STAR            shift and go to state 57
    DIV             shift and go to state 58


state 28

    (44) term -> factor .

    STAR            reduce using rule 44 (term -> factor .)
    DIV             reduce using rule 44 (term -> factor .)
    SEMICOLON       reduce using rule 44 (term -> factor .)
    PLUS            reduce using rule 44 (term -> factor .)
    MINUS           reduce using rule 44 (term -> factor .)
    RPAREN          reduce using rule 44 (term -> factor .)


state 29

    (45) factor -> LPAREN . expr RPAREN
    (39) expr -> . expr PLUS term
    (40) expr -> . expr MINUS term
    (41) expr -> . term
    (42) term -> . term STAR factor
    (43) term -> . term DIV factor
    (44) term -> . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    LPAREN          shift and go to state 29
    NUM             shift and go to state 30
    VAR             shift and go to state 31

    expr                           shift and go to state 59
    term                           shift and go to state 27
    factor                         shift and go to state 28
    array                          shift and go to state 32

state 30

    (46) factor -> NUM .

    STAR            reduce using rule 46 (factor -> NUM .)
    DIV             reduce using rule 46 (factor -> NUM .)
    SEMICOLON       reduce using rule 46 (factor -> NUM .)
    PLUS            reduce using rule 46 (factor -> NUM .)
    MINUS           reduce using rule 46 (factor -> NUM .)
    RPAREN          reduce using rule 46 (factor -> NUM .)


state 31

    (47) factor -> VAR .
    (49) array -> VAR . LBRACKET NUM RBRACKET

    STAR            reduce using rule 47 (factor -> VAR .)
    DIV             reduce using rule 47 (factor -> VAR .)
    SEMICOLON       reduce using rule 47 (factor -> VAR .)
    PLUS            reduce using rule 47 (factor -> VAR .)
    MINUS           reduce using rule 47 (factor -> VAR .)
    RPAREN          reduce using rule 47 (factor -> VAR .)
    LBRACKET        shift and go to state 21


state 32

    (48) factor -> array .

    STAR            reduce using rule 48 (factor -> array .)
    DIV             reduce using rule 48 (factor -> array .)
    SEMICOLON       reduce using rule 48 (factor -> array .)
    PLUS            reduce using rule 48 (factor -> array .)
    MINUS           reduce using rule 48 (factor -> array .)
    RPAREN          reduce using rule 48 (factor -> array .)


state 33

    (55) statement -> COUT p_content . SEMICOLON

    SEMICOLON       shift and go to state 60


state 34

    (51) p_content -> LESS . LESS VAR p_content
    (52) p_content -> LESS . LESS SENTENCE p_content
    (53) p_content -> LESS . LESS ENDL

    LESS            shift and go to state 61


state 35

    (3) statement -> INT VAR LPAREN . params RPAREN SEMICOLON
    (4) statement -> INT VAR LPAREN . params RPAREN
    (5) params -> . INT VAR
    (6) params -> . params COMMA INT VAR
    (7) params -> .

    INT             shift and go to state 62
    RPAREN          reduce using rule 7 (params -> .)
    COMMA           reduce using rule 7 (params -> .)

    params                         shift and go to state 63

state 36

    (16) statement -> INT VAR SEMICOLON .

    INT             reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    VAR             reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    IF              reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    FOR             reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    LB              reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    RB              reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    COUT            reduce using rule 16 (statement -> INT VAR SEMICOLON .)
    $end            reduce using rule 16 (statement -> INT VAR SEMICOLON .)


state 37

    (17) statement -> INT VAR EQUALS . NUM SEMICOLON
    (18) statement -> INT VAR EQUALS . VAR SEMICOLON
    (19) statement -> INT VAR EQUALS . expr SEMICOLON
    (39) expr -> . expr PLUS term
    (40) expr -> . expr MINUS term
    (41) expr -> . term
    (42) term -> . term STAR factor
    (43) term -> . term DIV factor
    (44) term -> . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    NUM             shift and go to state 65
    VAR             shift and go to state 64
    LPAREN          shift and go to state 29

    expr                           shift and go to state 66
    term                           shift and go to state 27
    factor                         shift and go to state 28
    array                          shift and go to state 32

state 38

    (50) statement -> INT STAR VAR . SEMICOLON

    SEMICOLON       shift and go to state 67


state 39

    (14) f_statement -> VAR . LPAREN args RPAREN SEMICOLON
    (15) f_statement -> VAR . EQUALS f_statement
    (47) factor -> VAR .
    (49) array -> VAR . LBRACKET NUM RBRACKET

    LPAREN          shift and go to state 20
    EQUALS          shift and go to state 68
    STAR            reduce using rule 47 (factor -> VAR .)
    DIV             reduce using rule 47 (factor -> VAR .)
    SEMICOLON       reduce using rule 47 (factor -> VAR .)
    PLUS            reduce using rule 47 (factor -> VAR .)
    MINUS           reduce using rule 47 (factor -> VAR .)
    LBRACKET        shift and go to state 21


state 40

    (20) statement -> VAR EQUALS NUM . SEMICOLON
    (46) factor -> NUM .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 69
    STAR            reduce using rule 46 (factor -> NUM .)
    DIV             reduce using rule 46 (factor -> NUM .)
    PLUS            reduce using rule 46 (factor -> NUM .)
    MINUS           reduce using rule 46 (factor -> NUM .)

  ! SEMICOLON       [ reduce using rule 46 (factor -> NUM .) ]


state 41

    (22) statement -> VAR EQUALS expr . SEMICOLON
    (39) expr -> expr . PLUS term
    (40) expr -> expr . MINUS term

    SEMICOLON       shift and go to state 70
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 42

    (15) f_statement -> VAR EQUALS f_statement .

    INT             reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    VAR             reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    IF              reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    ELSE            reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    FOR             reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    WHILE           reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    RETURN          reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    LB              reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    RB              reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    COUT            reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)
    $end            reduce using rule 15 (f_statement -> VAR EQUALS f_statement .)


state 43

    (24) statement -> VAR PLUS PLUS . SEMICOLON

    SEMICOLON       shift and go to state 71


state 44

    (8) args -> VAR .

    RPAREN          reduce using rule 8 (args -> VAR .)
    COMMA           reduce using rule 8 (args -> VAR .)


state 45

    (14) f_statement -> VAR LPAREN args . RPAREN SEMICOLON
    (9) args -> args . COMMA VAR
    (11) args -> args . COMMA NUM

    RPAREN          shift and go to state 72
    COMMA           shift and go to state 73


state 46

    (10) args -> NUM .

    RPAREN          reduce using rule 10 (args -> NUM .)
    COMMA           reduce using rule 10 (args -> NUM .)


state 47

    (49) array -> VAR LBRACKET NUM . RBRACKET

    RBRACKET        shift and go to state 74


state 48

    (21) statement -> array EQUALS NUM . SEMICOLON
    (46) factor -> NUM .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 75
    STAR            reduce using rule 46 (factor -> NUM .)
    DIV             reduce using rule 46 (factor -> NUM .)
    PLUS            reduce using rule 46 (factor -> NUM .)
    MINUS           reduce using rule 46 (factor -> NUM .)

  ! SEMICOLON       [ reduce using rule 46 (factor -> NUM .) ]


state 49

    (23) statement -> array EQUALS expr . SEMICOLON
    (39) expr -> expr . PLUS term
    (40) expr -> expr . MINUS term

    SEMICOLON       shift and go to state 76
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 50

    (25) statement -> IF LPAREN condition . RPAREN

    RPAREN          shift and go to state 77


state 51

    (29) condition -> VAR . GREATER NUM
    (30) condition -> VAR . LESS NUM
    (31) condition -> VAR . GREATER VAR
    (32) condition -> VAR . LESS VAR
    (33) condition -> VAR . EQUALS EQUALS NUM

    GREATER         shift and go to state 78
    LESS            shift and go to state 79
    EQUALS          shift and go to state 80


state 52

    (27) statement -> FOR LPAREN INT . VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN

    VAR             shift and go to state 81


state 53

    (28) statement -> WHILE LPAREN condition . RPAREN

    RPAREN          shift and go to state 82


state 54

    (34) statement -> RETURN expr SEMICOLON .

    INT             reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    VAR             reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    LB              reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    RB              reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    COUT            reduce using rule 34 (statement -> RETURN expr SEMICOLON .)
    $end            reduce using rule 34 (statement -> RETURN expr SEMICOLON .)


state 55

    (39) expr -> expr PLUS . term
    (42) term -> . term STAR factor
    (43) term -> . term DIV factor
    (44) term -> . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    LPAREN          shift and go to state 29
    NUM             shift and go to state 30
    VAR             shift and go to state 31

    term                           shift and go to state 83
    factor                         shift and go to state 28
    array                          shift and go to state 32

state 56

    (40) expr -> expr MINUS . term
    (42) term -> . term STAR factor
    (43) term -> . term DIV factor
    (44) term -> . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    LPAREN          shift and go to state 29
    NUM             shift and go to state 30
    VAR             shift and go to state 31

    term                           shift and go to state 84
    factor                         shift and go to state 28
    array                          shift and go to state 32

state 57

    (42) term -> term STAR . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    LPAREN          shift and go to state 29
    NUM             shift and go to state 30
    VAR             shift and go to state 31

    factor                         shift and go to state 85
    array                          shift and go to state 32

state 58

    (43) term -> term DIV . factor
    (45) factor -> . LPAREN expr RPAREN
    (46) factor -> . NUM
    (47) factor -> . VAR
    (48) factor -> . array
    (49) array -> . VAR LBRACKET NUM RBRACKET

    LPAREN          shift and go to state 29
    NUM             shift and go to state 30
    VAR             shift and go to state 31

    factor                         shift and go to state 86
    array                          shift and go to state 32

state 59

    (45) factor -> LPAREN expr . RPAREN
    (39) expr -> expr . PLUS term
    (40) expr -> expr . MINUS term

    RPAREN          shift and go to state 87
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 60

    (55) statement -> COUT p_content SEMICOLON .

    INT             reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    VAR             reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    IF              reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    ELSE            reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    FOR             reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    WHILE           reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    RETURN          reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    LB              reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    RB              reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    COUT            reduce using rule 55 (statement -> COUT p_content SEMICOLON .)
    $end            reduce using rule 55 (statement -> COUT p_content SEMICOLON .)


state 61

    (51) p_content -> LESS LESS . VAR p_content
    (52) p_content -> LESS LESS . SENTENCE p_content
    (53) p_content -> LESS LESS . ENDL

    VAR             shift and go to state 88
    SENTENCE        shift and go to state 89
    ENDL            shift and go to state 90


state 62

    (5) params -> INT . VAR

    VAR             shift and go to state 91


state 63

    (3) statement -> INT VAR LPAREN params . RPAREN SEMICOLON
    (4) statement -> INT VAR LPAREN params . RPAREN
    (6) params -> params . COMMA INT VAR

    RPAREN          shift and go to state 92
    COMMA           shift and go to state 93


state 64

    (18) statement -> INT VAR EQUALS VAR . SEMICOLON
    (47) factor -> VAR .
    (49) array -> VAR . LBRACKET NUM RBRACKET

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 94
    STAR            reduce using rule 47 (factor -> VAR .)
    DIV             reduce using rule 47 (factor -> VAR .)
    PLUS            reduce using rule 47 (factor -> VAR .)
    MINUS           reduce using rule 47 (factor -> VAR .)
    LBRACKET        shift and go to state 21

  ! SEMICOLON       [ reduce using rule 47 (factor -> VAR .) ]


state 65

    (17) statement -> INT VAR EQUALS NUM . SEMICOLON
    (46) factor -> NUM .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 95
    STAR            reduce using rule 46 (factor -> NUM .)
    DIV             reduce using rule 46 (factor -> NUM .)
    PLUS            reduce using rule 46 (factor -> NUM .)
    MINUS           reduce using rule 46 (factor -> NUM .)

  ! SEMICOLON       [ reduce using rule 46 (factor -> NUM .) ]


state 66

    (19) statement -> INT VAR EQUALS expr . SEMICOLON
    (39) expr -> expr . PLUS term
    (40) expr -> expr . MINUS term

    SEMICOLON       shift and go to state 96
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56


state 67

    (50) statement -> INT STAR VAR SEMICOLON .

    INT             reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    VAR             reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    IF              reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    ELSE            reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    FOR             reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    WHILE           reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    RETURN          reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    LB              reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    RB              reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    COUT            reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)
    $end            reduce using rule 50 (statement -> INT STAR VAR SEMICOLON .)


state 68

    (15) f_statement -> VAR EQUALS . f_statement
    (14) f_statement -> . VAR LPAREN args RPAREN SEMICOLON
    (15) f_statement -> . VAR EQUALS f_statement

    VAR             shift and go to state 97

    f_statement                    shift and go to state 42

state 69

    (20) statement -> VAR EQUALS NUM SEMICOLON .

    INT             reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    VAR             reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    IF              reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    ELSE            reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    FOR             reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    LB              reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    RB              reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    COUT            reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)
    $end            reduce using rule 20 (statement -> VAR EQUALS NUM SEMICOLON .)


state 70

    (22) statement -> VAR EQUALS expr SEMICOLON .

    INT             reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    VAR             reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    IF              reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    FOR             reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    LB              reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    RB              reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    COUT            reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)
    $end            reduce using rule 22 (statement -> VAR EQUALS expr SEMICOLON .)


state 71

    (24) statement -> VAR PLUS PLUS SEMICOLON .

    INT             reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    VAR             reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    IF              reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    ELSE            reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    FOR             reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    WHILE           reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    RETURN          reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    LB              reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    RB              reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    COUT            reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)
    $end            reduce using rule 24 (statement -> VAR PLUS PLUS SEMICOLON .)


state 72

    (14) f_statement -> VAR LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 98


state 73

    (9) args -> args COMMA . VAR
    (11) args -> args COMMA . NUM

    VAR             shift and go to state 99
    NUM             shift and go to state 100


state 74

    (49) array -> VAR LBRACKET NUM RBRACKET .

    EQUALS          reduce using rule 49 (array -> VAR LBRACKET NUM RBRACKET .)
    STAR            reduce using rule 49 (array -> VAR LBRACKET NUM RBRACKET .)
    DIV             reduce using rule 49 (array -> VAR LBRACKET NUM RBRACKET .)
    SEMICOLON       reduce using rule 49 (array -> VAR LBRACKET NUM RBRACKET .)
    PLUS            reduce using rule 49 (array -> VAR LBRACKET NUM RBRACKET .)
    MINUS           reduce using rule 49 (array -> VAR LBRACKET NUM RBRACKET .)
    RPAREN          reduce using rule 49 (array -> VAR LBRACKET NUM RBRACKET .)


state 75

    (21) statement -> array EQUALS NUM SEMICOLON .

    INT             reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    VAR             reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    IF              reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    ELSE            reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    FOR             reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    LB              reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    RB              reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    COUT            reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)
    $end            reduce using rule 21 (statement -> array EQUALS NUM SEMICOLON .)


state 76

    (23) statement -> array EQUALS expr SEMICOLON .

    INT             reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    VAR             reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    IF              reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    ELSE            reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    FOR             reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    RETURN          reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    LB              reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    RB              reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    COUT            reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)
    $end            reduce using rule 23 (statement -> array EQUALS expr SEMICOLON .)


state 77

    (25) statement -> IF LPAREN condition RPAREN .

    INT             reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    VAR             reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    IF              reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    ELSE            reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    FOR             reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    WHILE           reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    RETURN          reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    LB              reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    RB              reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    COUT            reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)
    $end            reduce using rule 25 (statement -> IF LPAREN condition RPAREN .)


state 78

    (29) condition -> VAR GREATER . NUM
    (31) condition -> VAR GREATER . VAR

    NUM             shift and go to state 102
    VAR             shift and go to state 101


state 79

    (30) condition -> VAR LESS . NUM
    (32) condition -> VAR LESS . VAR

    NUM             shift and go to state 104
    VAR             shift and go to state 103


state 80

    (33) condition -> VAR EQUALS . EQUALS NUM

    EQUALS          shift and go to state 105


state 81

    (27) statement -> FOR LPAREN INT VAR . EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN

    EQUALS          shift and go to state 106


state 82

    (28) statement -> WHILE LPAREN condition RPAREN .

    INT             reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    VAR             reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    IF              reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    ELSE            reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    FOR             reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    WHILE           reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    RETURN          reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    LB              reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    RB              reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    COUT            reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)
    $end            reduce using rule 28 (statement -> WHILE LPAREN condition RPAREN .)


state 83

    (39) expr -> expr PLUS term .
    (42) term -> term . STAR factor
    (43) term -> term . DIV factor

    SEMICOLON       reduce using rule 39 (expr -> expr PLUS term .)
    PLUS            reduce using rule 39 (expr -> expr PLUS term .)
    MINUS           reduce using rule 39 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 39 (expr -> expr PLUS term .)
    STAR            shift and go to state 57
    DIV             shift and go to state 58


state 84

    (40) expr -> expr MINUS term .
    (42) term -> term . STAR factor
    (43) term -> term . DIV factor

    SEMICOLON       reduce using rule 40 (expr -> expr MINUS term .)
    PLUS            reduce using rule 40 (expr -> expr MINUS term .)
    MINUS           reduce using rule 40 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 40 (expr -> expr MINUS term .)
    STAR            shift and go to state 57
    DIV             shift and go to state 58


state 85

    (42) term -> term STAR factor .

    STAR            reduce using rule 42 (term -> term STAR factor .)
    DIV             reduce using rule 42 (term -> term STAR factor .)
    SEMICOLON       reduce using rule 42 (term -> term STAR factor .)
    PLUS            reduce using rule 42 (term -> term STAR factor .)
    MINUS           reduce using rule 42 (term -> term STAR factor .)
    RPAREN          reduce using rule 42 (term -> term STAR factor .)


state 86

    (43) term -> term DIV factor .

    STAR            reduce using rule 43 (term -> term DIV factor .)
    DIV             reduce using rule 43 (term -> term DIV factor .)
    SEMICOLON       reduce using rule 43 (term -> term DIV factor .)
    PLUS            reduce using rule 43 (term -> term DIV factor .)
    MINUS           reduce using rule 43 (term -> term DIV factor .)
    RPAREN          reduce using rule 43 (term -> term DIV factor .)


state 87

    (45) factor -> LPAREN expr RPAREN .

    STAR            reduce using rule 45 (factor -> LPAREN expr RPAREN .)
    DIV             reduce using rule 45 (factor -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 45 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 45 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 45 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 45 (factor -> LPAREN expr RPAREN .)


state 88

    (51) p_content -> LESS LESS VAR . p_content
    (51) p_content -> . LESS LESS VAR p_content
    (52) p_content -> . LESS LESS SENTENCE p_content
    (53) p_content -> . LESS LESS ENDL
    (54) p_content -> .

    LESS            shift and go to state 34
    SEMICOLON       reduce using rule 54 (p_content -> .)

    p_content                      shift and go to state 107

state 89

    (52) p_content -> LESS LESS SENTENCE . p_content
    (51) p_content -> . LESS LESS VAR p_content
    (52) p_content -> . LESS LESS SENTENCE p_content
    (53) p_content -> . LESS LESS ENDL
    (54) p_content -> .

    LESS            shift and go to state 34
    SEMICOLON       reduce using rule 54 (p_content -> .)

    p_content                      shift and go to state 108

state 90

    (53) p_content -> LESS LESS ENDL .

    SEMICOLON       reduce using rule 53 (p_content -> LESS LESS ENDL .)


state 91

    (5) params -> INT VAR .

    RPAREN          reduce using rule 5 (params -> INT VAR .)
    COMMA           reduce using rule 5 (params -> INT VAR .)


state 92

    (3) statement -> INT VAR LPAREN params RPAREN . SEMICOLON
    (4) statement -> INT VAR LPAREN params RPAREN .

    SEMICOLON       shift and go to state 109
    INT             reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    VAR             reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    IF              reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    ELSE            reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    FOR             reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    WHILE           reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    RETURN          reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    LB              reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    RB              reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    COUT            reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)
    $end            reduce using rule 4 (statement -> INT VAR LPAREN params RPAREN .)


state 93

    (6) params -> params COMMA . INT VAR

    INT             shift and go to state 110


state 94

    (18) statement -> INT VAR EQUALS VAR SEMICOLON .

    INT             reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    VAR             reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    IF              reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    FOR             reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    LB              reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    RB              reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    COUT            reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)
    $end            reduce using rule 18 (statement -> INT VAR EQUALS VAR SEMICOLON .)


state 95

    (17) statement -> INT VAR EQUALS NUM SEMICOLON .

    INT             reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    VAR             reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    IF              reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    FOR             reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    LB              reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    RB              reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    COUT            reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)
    $end            reduce using rule 17 (statement -> INT VAR EQUALS NUM SEMICOLON .)


state 96

    (19) statement -> INT VAR EQUALS expr SEMICOLON .

    INT             reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    VAR             reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    IF              reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    ELSE            reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    FOR             reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    LB              reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    RB              reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    COUT            reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)
    $end            reduce using rule 19 (statement -> INT VAR EQUALS expr SEMICOLON .)


state 97

    (14) f_statement -> VAR . LPAREN args RPAREN SEMICOLON
    (15) f_statement -> VAR . EQUALS f_statement

    LPAREN          shift and go to state 20
    EQUALS          shift and go to state 68


state 98

    (14) f_statement -> VAR LPAREN args RPAREN SEMICOLON .

    INT             reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    VAR             reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    ELSE            reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    FOR             reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    RETURN          reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    LB              reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    RB              reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    COUT            reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)
    $end            reduce using rule 14 (f_statement -> VAR LPAREN args RPAREN SEMICOLON .)


state 99

    (9) args -> args COMMA VAR .

    RPAREN          reduce using rule 9 (args -> args COMMA VAR .)
    COMMA           reduce using rule 9 (args -> args COMMA VAR .)


state 100

    (11) args -> args COMMA NUM .

    RPAREN          reduce using rule 11 (args -> args COMMA NUM .)
    COMMA           reduce using rule 11 (args -> args COMMA NUM .)


state 101

    (31) condition -> VAR GREATER VAR .

    RPAREN          reduce using rule 31 (condition -> VAR GREATER VAR .)
    SEMICOLON       reduce using rule 31 (condition -> VAR GREATER VAR .)


state 102

    (29) condition -> VAR GREATER NUM .

    RPAREN          reduce using rule 29 (condition -> VAR GREATER NUM .)
    SEMICOLON       reduce using rule 29 (condition -> VAR GREATER NUM .)


state 103

    (32) condition -> VAR LESS VAR .

    RPAREN          reduce using rule 32 (condition -> VAR LESS VAR .)
    SEMICOLON       reduce using rule 32 (condition -> VAR LESS VAR .)


state 104

    (30) condition -> VAR LESS NUM .

    RPAREN          reduce using rule 30 (condition -> VAR LESS NUM .)
    SEMICOLON       reduce using rule 30 (condition -> VAR LESS NUM .)


state 105

    (33) condition -> VAR EQUALS EQUALS . NUM

    NUM             shift and go to state 111


state 106

    (27) statement -> FOR LPAREN INT VAR EQUALS . NUM SEMICOLON condition SEMICOLON for_update RPAREN

    NUM             shift and go to state 112


state 107

    (51) p_content -> LESS LESS VAR p_content .

    SEMICOLON       reduce using rule 51 (p_content -> LESS LESS VAR p_content .)


state 108

    (52) p_content -> LESS LESS SENTENCE p_content .

    SEMICOLON       reduce using rule 52 (p_content -> LESS LESS SENTENCE p_content .)


state 109

    (3) statement -> INT VAR LPAREN params RPAREN SEMICOLON .

    INT             reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    VAR             reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    IF              reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    ELSE            reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    FOR             reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    WHILE           reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    RETURN          reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    LB              reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    RB              reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    COUT            reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)
    $end            reduce using rule 3 (statement -> INT VAR LPAREN params RPAREN SEMICOLON .)


state 110

    (6) params -> params COMMA INT . VAR

    VAR             shift and go to state 113


state 111

    (33) condition -> VAR EQUALS EQUALS NUM .

    RPAREN          reduce using rule 33 (condition -> VAR EQUALS EQUALS NUM .)
    SEMICOLON       reduce using rule 33 (condition -> VAR EQUALS EQUALS NUM .)


state 112

    (27) statement -> FOR LPAREN INT VAR EQUALS NUM . SEMICOLON condition SEMICOLON for_update RPAREN

    SEMICOLON       shift and go to state 114


state 113

    (6) params -> params COMMA INT VAR .

    RPAREN          reduce using rule 6 (params -> params COMMA INT VAR .)
    COMMA           reduce using rule 6 (params -> params COMMA INT VAR .)


state 114

    (27) statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON . condition SEMICOLON for_update RPAREN
    (29) condition -> . VAR GREATER NUM
    (30) condition -> . VAR LESS NUM
    (31) condition -> . VAR GREATER VAR
    (32) condition -> . VAR LESS VAR
    (33) condition -> . VAR EQUALS EQUALS NUM

    VAR             shift and go to state 51

    condition                      shift and go to state 115

state 115

    (27) statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition . SEMICOLON for_update RPAREN

    SEMICOLON       shift and go to state 116


state 116

    (27) statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON . for_update RPAREN
    (35) for_update -> . VAR PLUS PLUS
    (36) for_update -> . VAR MINUS MINUS

    VAR             shift and go to state 117

    for_update                     shift and go to state 118

state 117

    (35) for_update -> VAR . PLUS PLUS
    (36) for_update -> VAR . MINUS MINUS

    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 118

    (27) statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update . RPAREN

    RPAREN          shift and go to state 121


state 119

    (35) for_update -> VAR PLUS . PLUS

    PLUS            shift and go to state 122


state 120

    (36) for_update -> VAR MINUS . MINUS

    MINUS           shift and go to state 123


state 121

    (27) statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .

    INT             reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    VAR             reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    IF              reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    ELSE            reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    FOR             reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    WHILE           reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    RETURN          reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    LB              reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    RB              reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    COUT            reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)
    $end            reduce using rule 27 (statement -> FOR LPAREN INT VAR EQUALS NUM SEMICOLON condition SEMICOLON for_update RPAREN .)


state 122

    (35) for_update -> VAR PLUS PLUS .

    RPAREN          reduce using rule 35 (for_update -> VAR PLUS PLUS .)


state 123

    (36) for_update -> VAR MINUS MINUS .

    RPAREN          reduce using rule 36 (for_update -> VAR MINUS MINUS .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 40 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 48 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 64 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 65 resolved as shift
